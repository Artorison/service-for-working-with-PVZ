// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	models "pvz/internal/models"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// PvzUserStore is an autogenerated mock type for the PvzUserStore type
type PvzUserStore struct {
	mock.Mock
}

type PvzUserStore_Expecter struct {
	mock *mock.Mock
}

func (_m *PvzUserStore) EXPECT() *PvzUserStore_Expecter {
	return &PvzUserStore_Expecter{mock: &_m.Mock}
}

// CloseLastReception provides a mock function with given fields: pvzID
func (_m *PvzUserStore) CloseLastReception(pvzID string) (models.Reception, error) {
	ret := _m.Called(pvzID)

	if len(ret) == 0 {
		panic("no return value specified for CloseLastReception")
	}

	var r0 models.Reception
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.Reception, error)); ok {
		return rf(pvzID)
	}
	if rf, ok := ret.Get(0).(func(string) models.Reception); ok {
		r0 = rf(pvzID)
	} else {
		r0 = ret.Get(0).(models.Reception)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(pvzID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PvzUserStore_CloseLastReception_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CloseLastReception'
type PvzUserStore_CloseLastReception_Call struct {
	*mock.Call
}

// CloseLastReception is a helper method to define mock.On call
//   - pvzID string
func (_e *PvzUserStore_Expecter) CloseLastReception(pvzID interface{}) *PvzUserStore_CloseLastReception_Call {
	return &PvzUserStore_CloseLastReception_Call{Call: _e.mock.On("CloseLastReception", pvzID)}
}

func (_c *PvzUserStore_CloseLastReception_Call) Run(run func(pvzID string)) *PvzUserStore_CloseLastReception_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *PvzUserStore_CloseLastReception_Call) Return(_a0 models.Reception, _a1 error) *PvzUserStore_CloseLastReception_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PvzUserStore_CloseLastReception_Call) RunAndReturn(run func(string) (models.Reception, error)) *PvzUserStore_CloseLastReception_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePVZ provides a mock function with given fields: city
func (_m *PvzUserStore) CreatePVZ(city models.City) (models.PVZ, error) {
	ret := _m.Called(city)

	if len(ret) == 0 {
		panic("no return value specified for CreatePVZ")
	}

	var r0 models.PVZ
	var r1 error
	if rf, ok := ret.Get(0).(func(models.City) (models.PVZ, error)); ok {
		return rf(city)
	}
	if rf, ok := ret.Get(0).(func(models.City) models.PVZ); ok {
		r0 = rf(city)
	} else {
		r0 = ret.Get(0).(models.PVZ)
	}

	if rf, ok := ret.Get(1).(func(models.City) error); ok {
		r1 = rf(city)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PvzUserStore_CreatePVZ_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePVZ'
type PvzUserStore_CreatePVZ_Call struct {
	*mock.Call
}

// CreatePVZ is a helper method to define mock.On call
//   - city models.City
func (_e *PvzUserStore_Expecter) CreatePVZ(city interface{}) *PvzUserStore_CreatePVZ_Call {
	return &PvzUserStore_CreatePVZ_Call{Call: _e.mock.On("CreatePVZ", city)}
}

func (_c *PvzUserStore_CreatePVZ_Call) Run(run func(city models.City)) *PvzUserStore_CreatePVZ_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.City))
	})
	return _c
}

func (_c *PvzUserStore_CreatePVZ_Call) Return(_a0 models.PVZ, _a1 error) *PvzUserStore_CreatePVZ_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PvzUserStore_CreatePVZ_Call) RunAndReturn(run func(models.City) (models.PVZ, error)) *PvzUserStore_CreatePVZ_Call {
	_c.Call.Return(run)
	return _c
}

// CreateProduct provides a mock function with given fields: pvzID, prType
func (_m *PvzUserStore) CreateProduct(pvzID string, prType models.ProductType) (models.Product, error) {
	ret := _m.Called(pvzID, prType)

	if len(ret) == 0 {
		panic("no return value specified for CreateProduct")
	}

	var r0 models.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(string, models.ProductType) (models.Product, error)); ok {
		return rf(pvzID, prType)
	}
	if rf, ok := ret.Get(0).(func(string, models.ProductType) models.Product); ok {
		r0 = rf(pvzID, prType)
	} else {
		r0 = ret.Get(0).(models.Product)
	}

	if rf, ok := ret.Get(1).(func(string, models.ProductType) error); ok {
		r1 = rf(pvzID, prType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PvzUserStore_CreateProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProduct'
type PvzUserStore_CreateProduct_Call struct {
	*mock.Call
}

// CreateProduct is a helper method to define mock.On call
//   - pvzID string
//   - prType models.ProductType
func (_e *PvzUserStore_Expecter) CreateProduct(pvzID interface{}, prType interface{}) *PvzUserStore_CreateProduct_Call {
	return &PvzUserStore_CreateProduct_Call{Call: _e.mock.On("CreateProduct", pvzID, prType)}
}

func (_c *PvzUserStore_CreateProduct_Call) Run(run func(pvzID string, prType models.ProductType)) *PvzUserStore_CreateProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(models.ProductType))
	})
	return _c
}

func (_c *PvzUserStore_CreateProduct_Call) Return(_a0 models.Product, _a1 error) *PvzUserStore_CreateProduct_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PvzUserStore_CreateProduct_Call) RunAndReturn(run func(string, models.ProductType) (models.Product, error)) *PvzUserStore_CreateProduct_Call {
	_c.Call.Return(run)
	return _c
}

// CreateReception provides a mock function with given fields: pvzID
func (_m *PvzUserStore) CreateReception(pvzID string) (models.Reception, error) {
	ret := _m.Called(pvzID)

	if len(ret) == 0 {
		panic("no return value specified for CreateReception")
	}

	var r0 models.Reception
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.Reception, error)); ok {
		return rf(pvzID)
	}
	if rf, ok := ret.Get(0).(func(string) models.Reception); ok {
		r0 = rf(pvzID)
	} else {
		r0 = ret.Get(0).(models.Reception)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(pvzID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PvzUserStore_CreateReception_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateReception'
type PvzUserStore_CreateReception_Call struct {
	*mock.Call
}

// CreateReception is a helper method to define mock.On call
//   - pvzID string
func (_e *PvzUserStore_Expecter) CreateReception(pvzID interface{}) *PvzUserStore_CreateReception_Call {
	return &PvzUserStore_CreateReception_Call{Call: _e.mock.On("CreateReception", pvzID)}
}

func (_c *PvzUserStore_CreateReception_Call) Run(run func(pvzID string)) *PvzUserStore_CreateReception_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *PvzUserStore_CreateReception_Call) Return(_a0 models.Reception, _a1 error) *PvzUserStore_CreateReception_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PvzUserStore_CreateReception_Call) RunAndReturn(run func(string) (models.Reception, error)) *PvzUserStore_CreateReception_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLastProduct provides a mock function with given fields: pvzID
func (_m *PvzUserStore) DeleteLastProduct(pvzID string) error {
	ret := _m.Called(pvzID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLastProduct")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(pvzID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PvzUserStore_DeleteLastProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLastProduct'
type PvzUserStore_DeleteLastProduct_Call struct {
	*mock.Call
}

// DeleteLastProduct is a helper method to define mock.On call
//   - pvzID string
func (_e *PvzUserStore_Expecter) DeleteLastProduct(pvzID interface{}) *PvzUserStore_DeleteLastProduct_Call {
	return &PvzUserStore_DeleteLastProduct_Call{Call: _e.mock.On("DeleteLastProduct", pvzID)}
}

func (_c *PvzUserStore_DeleteLastProduct_Call) Run(run func(pvzID string)) *PvzUserStore_DeleteLastProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *PvzUserStore_DeleteLastProduct_Call) Return(_a0 error) *PvzUserStore_DeleteLastProduct_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PvzUserStore_DeleteLastProduct_Call) RunAndReturn(run func(string) error) *PvzUserStore_DeleteLastProduct_Call {
	_c.Call.Return(run)
	return _c
}

// GetPVZInfo provides a mock function with given fields: start, end, page, limit
func (_m *PvzUserStore) GetPVZInfo(start time.Time, end time.Time, page int, limit int) ([]models.PVZInfo, error) {
	ret := _m.Called(start, end, page, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetPVZInfo")
	}

	var r0 []models.PVZInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(time.Time, time.Time, int, int) ([]models.PVZInfo, error)); ok {
		return rf(start, end, page, limit)
	}
	if rf, ok := ret.Get(0).(func(time.Time, time.Time, int, int) []models.PVZInfo); ok {
		r0 = rf(start, end, page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.PVZInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(time.Time, time.Time, int, int) error); ok {
		r1 = rf(start, end, page, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PvzUserStore_GetPVZInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPVZInfo'
type PvzUserStore_GetPVZInfo_Call struct {
	*mock.Call
}

// GetPVZInfo is a helper method to define mock.On call
//   - start time.Time
//   - end time.Time
//   - page int
//   - limit int
func (_e *PvzUserStore_Expecter) GetPVZInfo(start interface{}, end interface{}, page interface{}, limit interface{}) *PvzUserStore_GetPVZInfo_Call {
	return &PvzUserStore_GetPVZInfo_Call{Call: _e.mock.On("GetPVZInfo", start, end, page, limit)}
}

func (_c *PvzUserStore_GetPVZInfo_Call) Run(run func(start time.Time, end time.Time, page int, limit int)) *PvzUserStore_GetPVZInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Time), args[1].(time.Time), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *PvzUserStore_GetPVZInfo_Call) Return(_a0 []models.PVZInfo, _a1 error) *PvzUserStore_GetPVZInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PvzUserStore_GetPVZInfo_Call) RunAndReturn(run func(time.Time, time.Time, int, int) ([]models.PVZInfo, error)) *PvzUserStore_GetPVZInfo_Call {
	_c.Call.Return(run)
	return _c
}

// LoginUser provides a mock function with given fields: email, password
func (_m *PvzUserStore) LoginUser(email string, password string) (models.Token, error) {
	ret := _m.Called(email, password)

	if len(ret) == 0 {
		panic("no return value specified for LoginUser")
	}

	var r0 models.Token
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (models.Token, error)); ok {
		return rf(email, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) models.Token); ok {
		r0 = rf(email, password)
	} else {
		r0 = ret.Get(0).(models.Token)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PvzUserStore_LoginUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoginUser'
type PvzUserStore_LoginUser_Call struct {
	*mock.Call
}

// LoginUser is a helper method to define mock.On call
//   - email string
//   - password string
func (_e *PvzUserStore_Expecter) LoginUser(email interface{}, password interface{}) *PvzUserStore_LoginUser_Call {
	return &PvzUserStore_LoginUser_Call{Call: _e.mock.On("LoginUser", email, password)}
}

func (_c *PvzUserStore_LoginUser_Call) Run(run func(email string, password string)) *PvzUserStore_LoginUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *PvzUserStore_LoginUser_Call) Return(_a0 models.Token, _a1 error) *PvzUserStore_LoginUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PvzUserStore_LoginUser_Call) RunAndReturn(run func(string, string) (models.Token, error)) *PvzUserStore_LoginUser_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterUser provides a mock function with given fields: email, password, role
func (_m *PvzUserStore) RegisterUser(email string, password string, role models.Role) (models.User, error) {
	ret := _m.Called(email, password, role)

	if len(ret) == 0 {
		panic("no return value specified for RegisterUser")
	}

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, models.Role) (models.User, error)); ok {
		return rf(email, password, role)
	}
	if rf, ok := ret.Get(0).(func(string, string, models.Role) models.User); ok {
		r0 = rf(email, password, role)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(string, string, models.Role) error); ok {
		r1 = rf(email, password, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PvzUserStore_RegisterUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterUser'
type PvzUserStore_RegisterUser_Call struct {
	*mock.Call
}

// RegisterUser is a helper method to define mock.On call
//   - email string
//   - password string
//   - role models.Role
func (_e *PvzUserStore_Expecter) RegisterUser(email interface{}, password interface{}, role interface{}) *PvzUserStore_RegisterUser_Call {
	return &PvzUserStore_RegisterUser_Call{Call: _e.mock.On("RegisterUser", email, password, role)}
}

func (_c *PvzUserStore_RegisterUser_Call) Run(run func(email string, password string, role models.Role)) *PvzUserStore_RegisterUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(models.Role))
	})
	return _c
}

func (_c *PvzUserStore_RegisterUser_Call) Return(_a0 models.User, _a1 error) *PvzUserStore_RegisterUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PvzUserStore_RegisterUser_Call) RunAndReturn(run func(string, string, models.Role) (models.User, error)) *PvzUserStore_RegisterUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewPvzUserStore creates a new instance of PvzUserStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPvzUserStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *PvzUserStore {
	mock := &PvzUserStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
